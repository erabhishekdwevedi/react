{"version":3,"sources":["components/nav/Nav.js","pages/home/Home.js","pages/about/About.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openNav","e","setState","width","closeNav","state","react_default","a","createElement","id","class","style","className","onClick","NavLink","exact","to","Component","Home","src","About","Main","Switch","Route","path","component","App","components_nav_Nav","main_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTA4CeA,qBAtCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,QAAU,SAACC,GACPR,EAAKS,SAAS,CACVC,MAAO,SATIV,EAanBW,SAAW,SAACH,GACRR,EAAKS,SAAS,CACVC,MAAO,QAbXV,EAAKY,MAAQ,CACTF,MAAO,MAHIV,wEAoBf,OAEEa,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,MAAM,UAAUC,MAAO,CAAER,MAAOP,KAAKS,MAAMF,QAEvDG,EAAAC,EAAAC,cAAA,KAAGI,UAAU,WAAWC,QAASjB,KAAKQ,UAAtC,UAEAE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACfN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,IAAIH,QAASjB,KAAKQ,UAApC,QACAE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASE,GAAG,SAASH,QAASjB,KAAKQ,UAAnC,WAIJE,EAAAC,EAAAC,cAAA,QAAMI,UAAU,YAAYC,QAASjB,KAAKI,SAA1C,kBAnCEiB,8BCOHC,SARF,kBACXZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKW,IAAI,mEAAmET,MAAM,kBCMzEU,mLATX,OACEd,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,uBACCF,EAAAC,EAAAC,cAAA,6CALUS,aCcLI,mLARX,OACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOR,OAAK,EAACS,KAAK,IAAIC,UAAWP,IACjCZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOR,OAAK,EAACS,KAAK,SAASC,UAAWL,YAL3BH,aCUJS,mLARX,OACEpB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,cALUX,qBCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACI9B,EAAAC,EAAAC,cAAC6B,EAAD,OAGCC,SAASC,eAAe,SDqH3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.516a032c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink} from \"react-router-dom\";\nimport './Nav.css';\n\nclass Nav extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: \"0%\"\n        }\n    }\n\n    openNav = (e) => {\n        this.setState({\n            width: \"30%\"\n        })\n    }\n\n    closeNav = (e) => {\n        this.setState({\n            width: \"0%\"\n        })\n    }\n\n    render() {\n        return (\n          \n          <div>\n                <div id=\"myNav\" class=\"overlay\" style={{ width: this.state.width }}>\n\n                    <p className=\"closebtn\" onClick={this.closeNav}> &times; </p>\n\n                    <div className=\"overlay-content\">\n                    <NavLink exact to=\"/\" onClick={this.closeNav}>Home</NavLink>\n                    <NavLink to=\"/about\" onClick={this.closeNav}>About</NavLink>\n                    </div>\n                </div>\n\n                <span className=\"spanstyle\" onClick={this.openNav}>&#9776;</span>\n             </div>  \n        )\n    }\n}\nexport default Nav;","import React from 'react'\nimport './Home.css';\n\nconst Home = () => (\n  <div>\n      <h2> Home</h2>\n      <p> Welcome Home</p>\n      <img src=\"https://images.pexels.com/photos/457881/pexels-photo-457881.jpeg\" class=\"responsive\"/>\n  </div>\n)\n\nexport default Home","import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n         <h2> About Us</h2>\n          <p> We are wonderful people</p>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\n\nimport Home from '../../pages/home/Home';\nimport About from '../../pages/about/About';\n\nclass Main extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path='/' component={Home}></Route>\n        <Route exact path='/about' component={About}></Route>\n    </Switch>\n);\n}\n}\nexport default Main;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Nav from './components/nav/Nav';\nimport Main from './components/main/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav/>\n        <Main/>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n        \n        ,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}